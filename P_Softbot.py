import requests
import json
from datetime import datetime
from bs4 import BeautifulSoup
import subprocess
import math
import itertools
import os
import re
import numpy as np

# üîë R√©cup√©ration des cl√©s depuis GitHub Secrets (variables d'environnement)
API_KEY = os.getenv("API_FOOTBALL_KEY")
ODDS_API_KEY = os.getenv("ODDS_API_KEY")
groq_keys = [
    os.getenv("GROQ_API_KEY"),
    os.getenv("GROQ_API_KEY1")
]

# En-t√™tes API Football
api_headers = {
    'x-apisports-key': API_KEY
}

# Param√®tres API Odds
REGION = "eu"
MARKETS = "h2h,totals"

# Alternateur pour Groq
groq_key_index = 0

team_name_mapping = {
    "Bournemouth": "AFC Bournemouth",
    "Rep. Of Ireland": "Republic Of Ireland",
    "Sport Recife": "Sport",
    "RB Bragantino": "Red Bull Bragantino",
    "Fortaleza EC": "Fortaleza",
    "Gremio":"Gr√™mio",
    "Vitoria": "Vit√≥ria",
    "Vasco DA Gama": "Vasco da Gama",
    "Sao Paulo": "S√£o Paulo",
    "Atletico-MG": "Atl√©tico-MG",
    "Paris Saint Germain": "Paris Saint-Germain",
    "Atletico Madrid": "Atl√©tico Madrid",
    "San Diego": "San Diego FC",
    "Austin": "Austin FC",
    "Seattle Sounders": "Seattle Sounders FC",
    "Los Angeles FC": "LAFC",
    "Santa Fe": "Independiente Santa Fe",
    "Qingdao Youth Island": "Qingdao Hainiu",
    "Atletico Nacional": "Atl√©tico Nacional",
    "Henan Jianye": "Henan Songshan Longmen",
    "SHANGHAI SIPG": "Shanghai Port",
    "Al-Hilal Saudi FC": "Al Hilal",
    "Inter Miami": "Inter Miami CF",
    "Portuguesa FC": "Portuguesa",
    "2 de Mayo": "2 de Mayo",
    "America de Cali": "Am√©rica de Cali",
    "Carabobo FC": "Carabobo",
    "Rapid": "Rapid Bucuresti",
    "Operario-PR": "Operario PR",
    "Arges Pitesti": "Fc Arges",
    "Libertad Asuncion": "Libertad",
    "General Caballero": "General Caballero JLM",
    "Real Esppor Club": "Deportivo La Guaira",
    "UCV": "Universidad Central",
    "Cuiaba": "Cuiab√°",
    "remo": "Remo",
}

classement_ligue_mapping = {
    "Colombia": {
        "Primera A": {
            "url": "https://www.espn.com/soccer/standings/_/league/col.1",
            "odds_id": "none",
            "data_json": "Colombia_Primera_A.json"
        }
    },
    "France": {
        "Ligue 1": {
            "url": "https://www.espn.com/soccer/standings/_/league/fra.1",
            "odds_id": "soccer_france_ligue_one",
            "data_json": "France_Ligue_1.json"
        }
    },
    "Belgium": {
        "Jupiler Pro League": {
            "url": "https://www.espn.com/soccer/standings/_/league/bel.1",
            "odds_id": "soccer_belgium_first_div",
            "data_json": "Belgium_Jupiler_Pro_League.json"
        }
    },
    "England": {
        "Premier League": {
            "url": "https://www.espn.com/soccer/standings/_/league/eng.1",
            "odds_id": "soccer_epl",
            "data_json": "p_league.json"
        },
        "National League": {
            "url": "https://www.espn.com/soccer/standings/_/league/eng.5",
            "odds_id": "none",
            "data_json": "England_National_League.json"
        }
    },
    "Netherlands": {
        "Eredivisie": {
            "url": "https://www.espn.com/soccer/standings/_/league/ned.1",
            "odds_id": "soccer_netherlands_eredivisie",
            "data_json": "Netherlands_Eredivisie.json"
        }
    },
    "Portugal": {
        "Primeira Liga": {
            "url": "https://www.espn.com/soccer/standings/_/league/por.1",
            "odds_id": "soccer_portugal_primeira_liga",
            "data_json": "Portugal_Primeira_Liga.json"
        }
    },
    "Spain": {
        "La Liga": {
            "url": "https://www.espn.com/soccer/standings/_/league/esp.1",
            "odds_id": "soccer_spain_la_liga",
            "data_json": "laliga.json"
        }
    },
    "Germany": {
        "Bundesliga": {
            "url": "https://www.espn.com/soccer/standings/_/league/ger.1",
            "odds_id": "soccer_germany_bundesliga",
            "data_json": "bundesliga.json"
        }
    },
    "Austria": {
        "Bundesliga": {
            "url": "https://www.espn.com/soccer/standings/_/league/aut.1",
            "odds_id": "soccer_austria_bundesliga",
            "data_json": "Austria_Bundesliga.json"
        }
    },
    "Italy": {
        "Serie A": {
            "url": "https://www.espn.com/soccer/standings/_/league/ita.1",
            "odds_id": "soccer_italy_serie_a",
            "data_json": "Italy_Serie_A.json"
        }
    },
    "Brazil": {
        "Serie A": {
            "url": "https://www.espn.com/soccer/standings/_/league/bra.1",
            "odds_id": "soccer_brazil_campeonato",
            "data_json": "Brazil_Serie_A.json"
        },
        "Serie B": {
            "url": "https://www.espn.com/soccer/standings/_/league/bra.2",
            "odds_id": "soccer_brazil_serie_b",
            "data_json": "Brazil_Serie_B.json"
        }
    },
    "Turkey": {
        "S√ºper Lig": {
            "url": "https://www.espn.com/soccer/standings/_/league/tur.1",
            "odds_id": "soccer_turkey_super_league",
            "data_json": "Turkey_Super_Lig.json"
        }
    },
    "Mexico": {
        "Liga MX": {
            "url": "https://www.espn.com/soccer/standings/_/league/mex.1",
            "odds_id": "soccer_mexico_ligamx",
            "data_json": "Mexico_Liga_MX.json"
        }
    },
    "USA": {
        "Major League Soccer": {
            "url": "https://www.espn.com/soccer/standings/_/league/usa.1",
            "odds_id": "soccer_usa_mls",
            "data_json": "USA_Major_League_Soccer.json"
        }
    },
    "Japan": {
        "J1 League": {
            "url": "https://www.espn.com/soccer/standings/_/league/jpn.1",
            "odds_id": "soccer_japan_j_league",
            "data_json": "Japan_J1_League.json"
        }
    },
    "Saudi-Arabia": {
        "Pro League": {
            "url": "https://www.espn.com/soccer/standings/_/league/ksa.1",
            "odds_id": "none",
            "data_json": "Saudi_Arabia_Pro_League.json"
        }
    },
    "Switzerland": {
        "Super League": {
            "url": "https://www.espn.com/soccer/standings/_/league/sui.1",
            "odds_id": "soccer_switzerland_superleague",
            "data_json": "Switzerland_Super_League.json"
        }
    },
    "China": {
        "Super League": {
            "url": "https://www.espn.com/soccer/standings/_/league/chn.1",
            "odds_id": "soccer_china_superleague",
            "data_json": "China_Super_League.json"
        }
    },
    "Russia": {
        "Premier League": {
            "url": "https://www.espn.com/soccer/standings/_/league/rus.1",
            "odds_id": "none",
            "data_json": "Russia_Premier_League.json"
        }
    },
    "Greece": {
        "Super League 1": {
            "url": "https://www.espn.com/soccer/standings/_/league/gre.1",
            "odds_id": "soccer_greece_super_league",
            "data_json": "Greece_Super_League_1.json"
        }
    },
    "Chile": {
        "Primera Divisi√≥n": {
            "url": "https://www.espn.com/soccer/standings/_/league/chi.1",
            "odds_id": "soccer_chile_campeonato",
            "data_json": "Chile_Primera_Division.json"
        }
    },
    "Peru": {
        "Primera Divisi√≥n": {
            "url": "https://www.espn.com/soccer/standings/_/league/per.1",
            "odds_id": "none",
            "data_json": "Peru_Primera_Division.json"
        }
    },
    "Sweden": {
        "Allsvenskan": {
            "url": "https://www.espn.com/soccer/standings/_/league/swe.1",
            "odds_id": "soccer_sweden_allsvenskan",
            "data_json": "Sweden_Allsvenskan.json"
        }
    },
    "Argentina": {
        "Primera Nacional": {
            "url": "https://www.espn.com/soccer/standings/_/league/arg.2",
            "odds_id": "soccer_argentina_primera_division",
            "data_json": "Argentina_Primera_Nacional.json"
        }
    },
    "Paraguay": {
        "Division Profesional": {
            "url": "https://www.espn.com/soccer/standings/_/league/par.1",
            "odds_id": "none",
            "data_json": "Paraguay_Division_Profesional.json"
        }
    },
    "Venezuela": {
        "Primera Divisi√≥n": {
            "url": "https://www.espn.com/soccer/standings/_/league/ven.1",
            "odds_id": "none",
            "data_json": "Venezuela_Primera_Division.json"
        }
    },
    "Romania": {
        "Liga I": {
            "url": "https://www.espn.com/soccer/standings/_/league/rou.1",
            "odds_id": "none",
            "data_json": "Romania_Liga_I.json"
        }
    }
}

teams_urls = {
    # Bloc Europe du dernier JSON
    
    # Ajoutez d'autres √©quipes si besoin
}

headers = {'User-Agent': 'Mozilla/5.0'}

PREDICTIONS = []
FAILED_TEAMS = set()
IGNORED_ZERO_FORM_TEAMS = []

def get_match_stats(game_id):
    """
    R√©cup√®re les statistiques d√©taill√©es d'un match ESPN via son game_id.
    Retourne un dict { "Possession": (home, away), ... }
    """
    url = f"https://africa.espn.com/football/match/_/gameId/{game_id}"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                      "AppleWebKit/537.36 (KHTML, like Gecko) "
                      "Chrome/117.0.0.0 Safari/537.36",
        "Accept-Language": "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7"
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")

        stats_section = soup.find("section", {"data-testid": "prism-LayoutCard"})
        stats_divs = stats_section.find_all("div", class_="LOSQp") if stats_section else []
        
        stats = {}
        for div in stats_divs:
            stat_name_tag = div.find("span", class_="OkRBU")
            if not stat_name_tag:
                continue
            stat_name = stat_name_tag.get_text(strip=True)
            values = div.find_all("span", class_="bLeWt")
            if len(values) >= 2:
                team1_value = values[0].get_text(strip=True)
                team2_value = values[1].get_text(strip=True)
                stats[stat_name] = (team1_value, team2_value)

        print(f"üìä Stats r√©cup√©r√©es pour match {game_id}: {len(stats)} statistiques trouv√©es")
        return stats

    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration stats match {game_id} : {e}")
        return {}

# üß† Fonction DeepSeek avec alternance automatique des cl√©s et retry automatique (VERSION AM√âLIOR√âE)
def call_deepseek_analysis(prompt, max_retries=5):
    global groq_key_index

    for attempt in range(1, max_retries + 1):
        key = groq_keys[groq_key_index % len(groq_keys)]
        groq_key_index += 1

        headers = {
            "Authorization": f"Bearer {key}",
            "Content-Type": "application/json"
        }

        data = {
            "model": "openai/gpt-oss-120b",
            "messages": [
                {"role": "system", "content": "Tu es un expert en paris sportifs. Ton r√¥le est de faire une analyse compl√®te du match en fonction des donn√©es fournies, puis de proposer UNE pr√©diction fiable parmi : victoire domicile, victoire ext√©rieur, +2.5 buts, -2.5 buts, BTTS oui, BTTS non, double chance (1X ou X2). Tu dois aussi donner un pourcentage de confiance (0-100%) et les 2 scores les plus probables. ATTENTION : Ne jamais pr√©dire 'match nul' - utilise plut√¥t 'double chance 1X' ou 'double chance X2'. Ta mission Faire la pr√©diction la plus probable et pr√©cise."},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.5
        }

        try:
            print(f"üß† Tentative {attempt}/{max_retries} avec cl√© {(groq_key_index - 1) % len(groq_keys) + 1}...")
            response = requests.post("https://api.groq.com/openai/v1/chat/completions", headers=headers, json=data)
            response.raise_for_status()
            result = response.json()["choices"][0]["message"]["content"].strip()
            print(f"‚úÖ Analyse IA r√©ussie √† la tentative {attempt}")
            return result
        except Exception as e:
            print(f"‚ùå Erreur DeepSeek (tentative {attempt}/{max_retries}) : {str(e)}")
            if attempt < max_retries:
                print("üîÑ Nouvel essai dans 2 secondes...")
                import time
                time.sleep(2)  # Petite pause avant retry
            else:
                error_msg = f"‚ùå √âchec d√©finitif apr√®s {max_retries} tentatives. Derni√®re erreur : {str(e)}"
                print(error_msg)
                return error_msg

# üéØ MODULE MONTE-CARLO : Probabilit√©s vraies (autonome, sans IA ni cotes)
def ajuster_lambda_h2h(lambda_home, lambda_away, h2h_data):
    """
    Ajuste les moyennes de buts selon les confrontations directes pass√©es.
    Si une √©quipe a marqu√© nettement plus souvent dans les H2H, on renforce son Œª.
    """
    if not h2h_data:
        return lambda_home, lambda_away
    
    total_home = total_away = 0
    count = 0
    for m in h2h_data:
        score = m.get("score")
        if not score or "-" not in score:
            continue
        try:
            h, a = map(int, score.split("-"))
            total_home += h
            total_away += a
            count += 1
        except:
            continue

    if count == 0:
        return lambda_home, lambda_away

    avg_home = total_home / count
    avg_away = total_away / count

    # Ajustement doux (15%) pour √©viter le sur-apprentissage
    poids = 0.15
    lambda_home = (1 - poids) * lambda_home + poids * avg_home
    lambda_away = (1 - poids) * lambda_away + poids * avg_away

    print(f"üÜö Ajustement H2H: Œª_home {lambda_home:.2f} ‚Üí {lambda_home:.2f}, Œª_away {lambda_away:.2f} ‚Üí {lambda_away:.2f}")
    return lambda_home, lambda_away

def simulation_match_montecarlo(stats_home, stats_away, h2h_data=None, n=20000):
    """
    Simulation Monte-Carlo avanc√©e : combine mod√®le Poisson + calibrage international + H2H.
    Bas√©e uniquement sur les statistiques (sans IA ni cotes).
    Retourne les probabilit√©s 1X2, double chance, over/under, r√©sultat+total.
    """
    print(f"üé≤ D√©marrage simulation Monte-Carlo avec {n} it√©rations...")
    
    # ‚öΩ Moyennes de buts internationales (pond√©r√©es FIFA/UEFA)
    base_home_avg = 1.52
    base_away_avg = 1.18
    
    # ‚öôÔ∏è Calibrage selon les stats des √©quipes
    lambda_home = (stats_home["moyenne_marques"] + stats_away["moyenne_encaisses"]) / 2
    lambda_away = (stats_away["moyenne_marques"] + stats_home["moyenne_encaisses"]) / 2
    
    # Normalisation par la moyenne internationale
    lambda_home = (lambda_home + base_home_avg) / 2
    lambda_away = (lambda_away + base_away_avg) / 2

    print(f"üî¢ Œª initial: Home={lambda_home:.2f}, Away={lambda_away:.2f}")
    
    # üÜö Ajustement selon les H2H si disponibles
    if h2h_data:
        lambda_home, lambda_away = ajuster_lambda_h2h(lambda_home, lambda_away, h2h_data)

    # üßÆ Simulations Monte-Carlo r√©elles
    buts_home = np.random.poisson(lambda_home, n)
    buts_away = np.random.poisson(lambda_away, n)
    totals = buts_home + buts_away

    # --- Comptages 1X2 ---
    v1 = np.sum(buts_home > buts_away)
    x = np.sum(buts_home == buts_away)
    v2 = np.sum(buts_home < buts_away)

    res_1x2 = {
        "V1": round(v1/n*100, 2),
        "X": round(x/n*100, 2),
        "V2": round(v2/n*100, 2)
    }

    # --- Double chance ---
    res_double = {
        "1X": round((v1+x)/n*100, 2),
        "12": round((v1+v2)/n*100, 2),
        "X2": round((x+v2)/n*100, 2)
    }

    # --- Over/Under pour diff√©rents seuils ---
    seuils = [0.5, 1.5, 2.5, 3.5, 4.5, 5.5]
    over_under = {}
    for s in seuils:
        over_under[f"plus_de_{s}"] = round(np.sum(totals > s)/n*100, 2)
        over_under[f"moins_de_{s}"] = round(np.sum(totals <= s)/n*100, 2)

    # --- BTTS (Both Teams To Score) ---
    btts_oui = np.sum((buts_home > 0) & (buts_away > 0))
    btts_non = n - btts_oui
    btts = {
        "oui": round(btts_oui/n*100, 2),
        "non": round(btts_non/n*100, 2)
    }

    # --- Probabilit√©s conditionnelles R√©sultat + Total ---
    res_total_combo = {}
    for s in seuils:
        cond_v1 = np.sum((buts_home > buts_away) & (totals > s)) / n * 100
        cond_1x = np.sum(((buts_home >= buts_away) | (buts_home == buts_away)) & (totals > s)) / n * 100
        cond_v2 = np.sum((buts_home < buts_away) & (totals > s)) / n * 100
        res_total_combo[f"V1et+{s}"] = round(cond_v1, 2)
        res_total_combo[f"1Xet+{s}"] = round(cond_1x, 2)
        res_total_combo[f"V2et+{s}"] = round(cond_v2, 2)

    # --- Scores exacts les plus probables ---
    unique_scores, counts = np.unique(list(zip(buts_home, buts_away)), axis=0, return_counts=True)
    top_scores_idx = np.argsort(counts)[-10:][::-1]  # Top 10 scores
    scores_probables = {}
    for idx in top_scores_idx:
        score = tuple(unique_scores[idx])
        prob = round(counts[idx]/n*100, 2)
        scores_probables[f"{score[0]}-{score[1]}"] = prob

    print(f"‚úÖ Simulation termin√©e: {n} matchs simul√©s")
    print(f"üéØ R√©sultats: V1={res_1x2['V1']}%, X={res_1x2['X']}%, V2={res_1x2['V2']}%")
    print(f"‚öΩ Plus de 2.5 buts: {over_under['plus_de_2.5']}%")
    print(f"ü•Ö BTTS: {btts['oui']}%")

    return {
        "parametres_simulation": {
            "iterations": n,
            "lambda_home": round(lambda_home, 3),
            "lambda_away": round(lambda_away, 3),
            "ajustement_h2h": bool(h2h_data and len(h2h_data) > 0)
        },
        "1x2": res_1x2,
        "double_chance": res_double,
        "over_under": over_under,
        "btts": btts,
        "resultat_total": res_total_combo,
        "scores_probables": scores_probables,
        "buts_moyens_simules": {
            "home": round(np.mean(buts_home), 2),
            "away": round(np.mean(buts_away), 2),
            "total": round(np.mean(totals), 2)
        }
    }

# üîÆ G√©n√©rateur de prompt d√©taill√© (VERSION SANS MONTE-CARLO)
def generate_detailed_prompt(prediction_obj):
    home = prediction_obj["HomeTeam"]
    away = prediction_obj["AwayTeam"]
    stats_home = prediction_obj["stats_home"]
    stats_away = prediction_obj["stats_away"]
    odds = prediction_obj.get("odds", {})
    pos_home = prediction_obj.get("classement_home")
    pts_home = prediction_obj.get("points_classement_home")
    pos_away = prediction_obj.get("classement_away")
    pts_away = prediction_obj.get("points_classement_away")
    league = prediction_obj["league"]
    date = prediction_obj["date"]

    prompt = f"""
ANALYSE DE MATCH - {date}
{league}
{home} (DOMICILE) vs {away} (EXT√âRIEUR)

üè† STATISTIQUES DE {home} (DOMICILE) :
- Classement : {pos_home}·µâ avec {pts_home} points
- Moyenne buts marqu√©s : {stats_home['moyenne_marques']:.2f}
- Moyenne buts encaiss√©s : {stats_home['moyenne_encaisses']:.2f}
- Forme sur 6 matchs : {' '.join(stats_home['form_6'])} ({stats_home.get('total_points_6', 0)} points)
- Forme sur 10 matchs : {' '.join(stats_home['form_10'])} ({stats_home.get('total_points_10', 0)} points)
- S√©rie domicile : {'-'.join(stats_home.get('serie_domicile', []))}
- Buts marqu√©s domicile : {stats_home.get('buts_dom_marques', 0)}
- Buts encaiss√©s domicile : {stats_home.get('buts_dom_encaisses', 0)}

‚úàÔ∏è STATISTIQUES DE {away} (EXT√âRIEUR) :
- Classement : {pos_away}·µâ avec {pts_away} points
- Moyenne buts marqu√©s : {stats_away['moyenne_marques']:.2f}
- Moyenne buts encaiss√©s : {stats_away['moyenne_encaisses']:.2f}
- Forme sur 6 matchs : {' '.join(stats_away['form_6'])} ({stats_away.get('total_points_6', 0)} points)
- Forme sur 10 matchs : {' '.join(stats_away['form_10'])} ({stats_away.get('total_points_10', 0)} points)
- S√©rie ext√©rieur : {'-'.join(stats_away.get('serie_exterieur', []))}
- Buts marqu√©s ext√©rieur : {stats_away.get('buts_ext_marques', 0)}
- Buts encaiss√©s ext√©rieur : {stats_away.get('buts_ext_encaisses', 0)}

üí∞ COTES DISPONIBLES :
"""
    if odds and odds != {}:
        bookmaker = odds.get('bookmaker', 'N/A')
        prompt += f"Bookmaker : {bookmaker}\n"
        
        h2h = odds.get('h2h', {})
        if h2h:
            prompt += "- 1X2 : "
            for outcome, cote in h2h.items():
                prompt += f"{outcome} : {cote} | "
            prompt += "\n"
        
        totals = odds.get('totals', {})
        if totals:
            prompt += "- Total 2.5 : "
            for outcome, cote in totals.items():
                prompt += f"{outcome} : {cote} | "
            prompt += "\n"
    else:
        prompt += "Aucune cote disponible\n"

    # ‚úÖ NOUVEAUT√â 1 : Ajout des 10 derniers matchs complets avec nouvelle structure + STATS D√âTAILL√âES
    prompt += f"\nüìÖ 10 DERNIERS MATCHS DE {home} (DOMICILE) AVEC STATISTIQUES D√âTAILL√âES :\n"
    last_matches_home = prediction_obj.get("last_matches_home", [])
    if last_matches_home:
        for i, match in enumerate(last_matches_home[:10], 1):
            if isinstance(match, dict) and all(key in match for key in ['date', 'home_team', 'away_team', 'score', 'competition', 'status']):
                date_match = match['date']
                team1 = match['home_team']
                team2 = match['away_team']
                competition = match['competition']
                score = match['score']
                status = match['status']
                game_id = match.get('game_id', 'N/A')
                url = match.get('url', 'N/A')
                
                prompt += f"  {i}. {date_match} | {team1} vs {team2} : {score} [{competition}] ({status}) [ID: {game_id}]\n"
                
                # ‚úÖ NOUVEAU : Ajout des statistiques d√©taill√©es du match
                match_stats = match.get('stats', {})
                if match_stats:
                    prompt += f"     üìä Stats d√©taill√©es : "
                    for stat_name, (val1, val2) in match_stats.items():
                        prompt += f"{stat_name}: {val1}-{val2} | "
                    prompt += f"\n     üîó URL: {url}\n"
                else:
                    prompt += f"     üìä Stats d√©taill√©es : Non disponibles\n"
    else:
        prompt += "  Aucun match d√©taill√© disponible\n"

    prompt += f"\nüìÖ 10 DERNIERS MATCHS DE {away} (EXT√âRIEUR) AVEC STATISTIQUES D√âTAILL√âES :\n"
    last_matches_away = prediction_obj.get("last_matches_away", [])
    if last_matches_away:
        for i, match in enumerate(last_matches_away[:10], 1):
            if isinstance(match, dict) and all(key in match for key in ['date', 'home_team', 'away_team', 'score', 'competition', 'status']):
                date_match = match['date']
                team1 = match['home_team']
                team2 = match['away_team']
                competition = match['competition']
                score = match['score']
                status = match['status']
                game_id = match.get('game_id', 'N/A')
                url = match.get('url', 'N/A')
                
                prompt += f"  {i}. {date_match} | {team1} vs {team2} : {score} [{competition}] ({status}) [ID: {game_id}]\n"
                
                # ‚úÖ NOUVEAU : Ajout des statistiques d√©taill√©es du match
                match_stats = match.get('stats', {})
                if match_stats:
                    prompt += f"     üìä Stats d√©taill√©es : "
                    for stat_name, (val1, val2) in match_stats.items():
                        prompt += f"{stat_name}: {val1}-{val2} | "
                    prompt += f"\n     üîó URL: {url}\n"
                else:
                    prompt += f"     üìä Stats d√©taill√©es : Non disponibles\n"
    else:
        prompt += "  Aucun match d√©taill√© disponible\n"

    # ‚úÖ NOUVEAUT√â 2 : Ajout du classement complet de la ligue
    prompt += "\nüèÜ CLASSEMENT COMPLET DE LA LIGUE :\n"
    classement_complet = prediction_obj.get("classement_complet", [])
    if classement_complet:
        for team_data in classement_complet[:20]:  # Limiter √† 20 pour √©viter un prompt trop long
            position = team_data.get('position', 'N/A')
            team_name = team_data.get('team', 'N/A')
            points = team_data.get('points', 'N/A')
            
            # Marquer les √©quipes du match en cours
            marker = ""
            if team_name == home:
                marker = " ‚Üê DOMICILE"
            elif team_name == away:
                marker = " ‚Üê EXT√âRIEUR"
            
            prompt += f"  {position}. {team_name} ({points} pts){marker}\n"
    else:
        prompt += "  Classement complet non disponible\n"

    # ‚úÖ NOUVEAUT√â 3 : Ajout des confrontations directes H2H avec STATISTIQUES D√âTAILL√âES
    confrontations_h2h = prediction_obj.get("confrontations_saison_derniere", [])
    if confrontations_h2h:
        prompt += f"\nüÜö CONFRONTATIONS DIRECTES (SAISON DERNI√àRE) AVEC STATISTIQUES D√âTAILL√âES :\n"
        for i, match in enumerate(confrontations_h2h, 1):
            date_h2h = match.get('date', 'N/A')
            team1_h2h = match.get('team1', 'N/A')
            team2_h2h = match.get('team2', 'N/A')
            score_h2h = match.get('score', 'N/A')
            competition_h2h = match.get('competition', 'N/A')
            source_h2h = match.get('source', 'N/A')
            game_id_h2h = match.get('gameId', 'N/A')
            
            prompt += f"  {i}. {date_h2h} | {team1_h2h} vs {team2_h2h} : {score_h2h} [{competition_h2h}] (Source: {source_h2h}) [ID: {game_id_h2h}]\n"
            
            # ‚úÖ NOUVEAU : Ajout des statistiques d√©taill√©es H2H
            h2h_stats = match.get('stats', {})
            if h2h_stats:
                prompt += f"     üìä Stats H2H d√©taill√©es : "
                for stat_name, (val1, val2) in h2h_stats.items():
                    prompt += f"{stat_name}: {val1}-{val2} | "
                prompt += "\n"
            else:
                prompt += f"     üìä Stats H2H d√©taill√©es : Non disponibles\n"
    else:
        prompt += f"\nüÜö CONFRONTATIONS DIRECTES (SAISON DERNI√àRE) :\n  Aucune confrontation H2H disponible\n"

    prompt += f"""
MISSION :
1. Analyse comparative des deux √©quipes (forces/faiblesses)
2. Impact du facteur domicile/ext√©rieur
3. Analyse des formes r√©centes et tendances √† partir des matchs d√©taill√©s AVEC LEURS STATISTIQUES
4. Analyse du contexte du championnat gr√¢ce au classement complet
5. Prise en compte des confrontations directes r√©centes avec leurs statistiques d√©taill√©es
6. √âvaluation des cotes (si disponibles)
7. ‚ú® NOUVEAU : Analyse approfondie des statistiques d√©taill√©es des matchs pass√©s (possession, tirs, corners, etc.)
8. Pr√©diction finale claire : UNE SEULE recommandation parmi :
   - "Victoire domicile" ({home})
   - "Victoire ext√©rieur" ({away})
   - "Plus de 2.5 buts"
   - "Moins de 2.5 buts"
   - "BTTS oui" (Both Teams To Score)
   - "BTTS non"
   - "Double chance 1X" (domicile ou nul)
   - "Double chance X2" (nul ou ext√©rieur)

9. ‚ú® NOUVEAUT√âS OBLIGATOIRES :
   - POURCENTAGE DE CONFIANCE (0-100%) pour ta pr√©diction principale
   - LES 2 SCORES LES PLUS PROBABLES (ex: "1-0 ou 2-1")

‚ö†Ô∏è IMPORTANT : 
- Ne JAMAIS pr√©dire "Match nul" - utilise "Double chance 1X" ou "Double chance X2" √† la place.

Justifie ta pr√©diction avec toutes les donn√©es statistiques fournies, en tenant compte particuli√®rement des matchs r√©cents d√©taill√©s avec leurs statistiques compl√®tes, du contexte du classement, des confrontations directes avec leurs stats d√©taill√©es.

FORMAT DE R√âPONSE OBLIGATOIRE :
- PR√âDICTION PRINCIPALE : [ta pr√©diction]
- CONFIANCE : [X]%
- SCORES PROBABLES : [Score1] ou [Score2]
- JUSTIFICATION : [ton analyse d√©taill√©e]
"""
    return prompt

# ‚úÖ FONCTION AM√âLIOR√âE : Extraction des donn√©es de l'analyse IA (SUPPORT DES DEUX FORMATS)
def extract_confidence_percentage(analyse_ia):
    """
    Extrait le pourcentage de confiance de l'analyse IA
    Support des deux formats : 
    1. Format simple : CONFIANCE : XX%
    2. Format avec ** : **CONFIANCE** : XX %
    Retourne le pourcentage en tant que nombre entier ou None si non trouv√©
    """
    if not analyse_ia or isinstance(analyse_ia, str) and analyse_ia.startswith("‚ùå"):
        return None
    
    # Patterns pour le format avec ** (nouveau format)
    patterns_with_stars = [
        r'\*\*CONFIANCE\*\*\s*:\s*(\d+)\s*%',
        r'\*\*Confiance\*\*\s*:\s*(\d+)\s*%',
        r'\*\*confiance\*\*\s*:\s*(\d+)\s*%',
        r'\*\*CONFIANCE\*\*\s*:\s*(\d+)\s*\%',
    ]
    
    # Patterns pour le format simple (ancien format)
    patterns_simple = [
        r'CONFIANCE\s*:\s*(\d+)%',
        r'Confiance\s*:\s*(\d+)%',
        r'confiance\s*:\s*(\d+)%',
        r'CONFIANCE\s*:\s*(\d+)\s*%',
        r'(\d+)%\s*de\s*confiance',
        r'confiance\s*de\s*(\d+)%'
    ]
    
    # Essayer d'abord les patterns avec **
    for pattern in patterns_with_stars:
        match = re.search(pattern, analyse_ia, re.IGNORECASE)
        if match:
            try:
                percentage = int(match.group(1))
                if 0 <= percentage <= 100:
                    print(f"üìä Pourcentage de confiance extrait (format **) : {percentage}%")
                    return percentage
            except ValueError:
                continue
    
    # Puis essayer les patterns simples
    for pattern in patterns_simple:
        match = re.search(pattern, analyse_ia, re.IGNORECASE)
        if match:
            try:
                percentage = int(match.group(1))
                if 0 <= percentage <= 100:
                    print(f"üìä Pourcentage de confiance extrait (format simple) : {percentage}%")
                    return percentage
            except ValueError:
                continue
    
    print("‚ö†Ô∏è Pourcentage de confiance non trouv√© dans l'analyse IA")
    return None

# ‚úÖ NOUVELLES FONCTIONS D'EXTRACTION POUR LES AUTRES √âL√âMENTS
def extract_prediction_principale(analyse_ia):
    """
    Extrait la pr√©diction principale de l'analyse IA
    Support des deux formats
    """
    if not analyse_ia or isinstance(analyse_ia, str) and analyse_ia.startswith("‚ùå"):
        return None
    
    # Patterns pour le format avec **
    patterns_with_stars = [
        r'\*\*PR√âDICTION PRINCIPALE\*\*\s*:\s*([^\n\r]+)',
        r'\*\*Pr√©diction principale\*\*\s*:\s*([^\n\r]+)',
        r'\*\*PREDICTION PRINCIPALE\*\*\s*:\s*([^\n\r]+)',
    ]
    
    # Patterns pour le format simple
    patterns_simple = [
        r'PR√âDICTION PRINCIPALE\s*:\s*([^\n\r]+)',
        r'Pr√©diction principale\s*:\s*([^\n\r]+)',
        r'PREDICTION PRINCIPALE\s*:\s*([^\n\r]+)',
    ]
    
    # Essayer d'abord les patterns avec **
    for pattern in patterns_with_stars:
        match = re.search(pattern, analyse_ia, re.IGNORECASE)
        if match:
            prediction = match.group(1).strip()
            print(f"üéØ Pr√©diction principale extraite (format **) : {prediction}")
            return prediction
    
    # Puis essayer les patterns simples
    for pattern in patterns_simple:
        match = re.search(pattern, analyse_ia, re.IGNORECASE)
        if match:
            prediction = match.group(1).strip()
            print(f"üéØ Pr√©diction principale extraite (format simple) : {prediction}")
            return prediction
    
    print("‚ö†Ô∏è Pr√©diction principale non trouv√©e dans l'analyse IA")
    return None

def extract_corners_prevu(analyse_ia):
    """
    Extrait la pr√©diction de corners de l'analyse IA
    Support des deux formats
    """
    if not analyse_ia or isinstance(analyse_ia, str) and analyse_ia.startswith("‚ùå"):
        return None
    
    # Patterns pour le format avec **
    patterns_with_stars = [
        r'\*\*CORNERS PR√âVUS\*\*\s*:\s*([^\n\r]+)',
        r'\*\*Corners pr√©vus\*\*\s*:\s*([^\n\r]+)',
        r'\*\*CORNERS PREVUS\*\*\s*:\s*([^\n\r]+)',
    ]
    
    # Patterns pour le format simple
    patterns_simple = [
        r'CORNERS PR√âVUS\s*:\s*([^\n\r]+)',
        r'Corners pr√©vus\s*:\s*([^\n\r]+)',
        r'CORNERS PREVUS\s*:\s*([^\n\r]+)',
    ]
    
    # Essayer d'abord les patterns avec **
    for pattern in patterns_with_stars:
        match = re.search(pattern, analyse_ia, re.IGNORECASE)
        if match:
            corners = match.group(1).strip()
            print(f"üìê Corners pr√©vus extraits (format **) : {corners}")
            return corners
    
    # Puis essayer les patterns simples
    for pattern in patterns_simple:
        match = re.search(pattern, analyse_ia, re.IGNORECASE)
        if match:
            corners = match.group(1).strip()
            print(f"üìê Corners pr√©vus extraits (format simple) : {corners}")
            return corners
    
    print("‚ö†Ô∏è Corners pr√©vus non trouv√©s dans l'analyse IA")
    return None

def extract_tirs_cadres_prevu(analyse_ia):
    """
    Extrait la pr√©diction de tirs cadr√©s de l'analyse IA
    Support des deux formats
    """
    if not analyse_ia or isinstance(analyse_ia, str) and analyse_ia.startswith("‚ùå"):
        return None
    
    # Patterns pour le format avec **
    patterns_with_stars = [
        r'\*\*TIRS CADR√âS PR√âVUS\*\*\s*:\s*([^\n\r]+)',
        r'\*\*Tirs cadr√©s pr√©vus\*\*\s*:\s*([^\n\r]+)',
        r'\*\*TIRS CADRES PREVUS\*\*\s*:\s*([^\n\r]+)',
    ]
    
    # Patterns pour le format simple
    patterns_simple = [
        r'TIRS CADR√âS PR√âVUS\s*:\s*([^\n\r]+)',
        r'Tirs cadr√©s pr√©vus\s*:\s*([^\n\r]+)',
        r'TIRS CADRES PREVUS\s*:\s*([^\n\r]+)',
    ]
    
    # Essayer d'abord les patterns avec **
    for pattern in patterns_with_stars:
        match = re.search(pattern, analyse_ia, re.IGNORECASE)
        if match:
            tirs = match.group(1).strip()
            print(f"üéØ Tirs cadr√©s pr√©vus extraits (format **) : {tirs}")
            return tirs
    
    # Puis essayer les patterns simples
    for pattern in patterns_simple:
        match = re.search(pattern, analyse_ia, re.IGNORECASE)
        if match:
            tirs = match.group(1).strip()
            print(f"üéØ Tirs cadr√©s pr√©vus extraits (format simple) : {tirs}")
            return tirs
    
    print("‚ö†Ô∏è Tirs cadr√©s pr√©vus non trouv√©s dans l'analyse IA")
    return None

def extract_scores_probables(analyse_ia):
    """
    Extrait les scores probables de l'analyse IA
    Support des deux formats
    """
    if not analyse_ia or isinstance(analyse_ia, str) and analyse_ia.startswith("‚ùå"):
        return None
    
    # Patterns pour le format avec **
    patterns_with_stars = [
        r'\*\*SCORES PROBABLES\*\*\s*:\s*([^\n\r]+)',
        r'\*\*Scores probables\*\*\s*:\s*([^\n\r]+)',
        r'\*\*SCORES PROBABLES\*\*\s*:\s*([^\n\r]+)',
    ]
    
    # Patterns pour le format simple
    patterns_simple = [
        r'SCORES PROBABLES\s*:\s*([^\n\r]+)',
        r'Scores probables\s*:\s*([^\n\r]+)',
        r'SCORES PROBABLES\s*:\s*([^\n\r]+)',
    ]
    
    # Essayer d'abord les patterns avec **
    for pattern in patterns_with_stars:
        match = re.search(pattern, analyse_ia, re.IGNORECASE)
        if match:
            scores = match.group(1).strip()
            print(f"‚öΩ Scores probables extraits (format **) : {scores}")
            return scores
    
    # Puis essayer les patterns simples
    for pattern in patterns_simple:
        match = re.search(pattern, analyse_ia, re.IGNORECASE)
        if match:
            scores = match.group(1).strip()
            print(f"‚öΩ Scores probables extraits (format simple) : {scores}")
            return scores
    
    print("‚ö†Ô∏è Scores probables non trouv√©s dans l'analyse IA")
    return None

def get_odds_for_match(sport_odds_id, home_team_api, away_team_api, home_team_espn, away_team_espn):
    if sport_odds_id == "none":
        print(f"‚ö†Ô∏è Pas d'odds_id disponible pour ce championnat")
        return None

    url = f"https://api.the-odds-api.com/v4/sports/{sport_odds_id}/odds"
    params = {
        "apiKey": ODDS_API_KEY,
        "regions": REGION,
        "markets": MARKETS,
        "oddsFormat": "decimal"
    }

    try:
        response = requests.get(url, params=params)
        if response.status_code != 200:
            print(f"‚ùå Erreur API Odds : {response.status_code}")
            return None

        matches = response.json()

        target_match = None
        for match in matches:
            home_odds = match['home_team']
            away_odds = match['away_team']

            if ((home_odds.lower() == home_team_api.lower() or away_odds.lower() == home_team_api.lower()) and 
                (home_odds.lower() == away_team_api.lower() or away_odds.lower() == away_team_api.lower())):
                target_match = match
                print(f"‚úÖ Match trouv√© avec noms API : {home_odds} vs {away_odds}")
                break

            if ((home_odds.lower() == home_team_espn.lower() or away_odds.lower() == home_team_espn.lower()) and 
                (home_odds.lower() == away_team_espn.lower() or away_odds.lower() == away_team_espn.lower())):
                target_match = match
                print(f"‚úÖ Match trouv√© avec noms ESPN : {home_odds} vs {away_odds}")
                break

        if not target_match:
            print(f"‚ùå Match non trouv√© dans les cotes : {home_team_api} vs {away_team_api}")
            return None

        # ‚úÖ Choix du bookmaker (priorit√© 1xBet, puis Betclic, sinon premier dispo)
        bookmaker = next((b for b in target_match['bookmakers'] if b['title'].lower() == "1xbet"), None)
        if not bookmaker:
            bookmaker = next((b for b in target_match['bookmakers'] if b['title'].lower() == "betclic"), None)
        if not bookmaker and target_match['bookmakers']:
            bookmaker = target_match['bookmakers'][0]

        if not bookmaker:
            print(f"‚ö†Ô∏è Aucun bookmaker disponible pour ce match")
            return None

        print(f"üè¢ Bookmaker utilis√© : {bookmaker['title']}")

        odds_data = {
            "bookmaker": bookmaker['title'],
            "h2h": {},
            "totals": {}
        }

        for market in bookmaker['markets']:
            if market['key'] == "h2h":
                print("üéØ March√© : 1X2")
                for outcome in market['outcomes']:
                    odds_data['h2h'][outcome['name']] = outcome['price']
                    print(f"    ‚û§ {outcome['name']} : Cote {outcome['price']}")
            elif market['key'] == "totals":
                print("üéØ March√© : Total 2.5 (Over/Under)")
                for outcome in market['outcomes']:
                    odds_data['totals'][outcome['name']] = outcome['price']
                    print(f"    ‚û§ {outcome['name']} : Cote {outcome['price']}")

        return odds_data

    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des cotes : {e}")
        return None

# üîß Classe r√©utilisable de scraping de classement (VERSION AM√âLIOR√âE)
class ClassementScraper:
    def __init__(self, url):
        self.url = url
        self.headers = {'User-Agent': 'Mozilla/5.0'}
        self.teams_positions = {}
        self.full_standings = []  # Nouveau : stockage du classement complet

    def scrape_table(self):
        try:
            response = requests.get(self.url, headers=self.headers)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # 1. Extraire les noms d'√©quipes
            team_divs = soup.select('.team-link .hide-mobile a')
            team_names = [tag.text.strip() for tag in team_divs]
            
            # 2. Extraire les points (8e cellule de chaque ligne dans le 2e tableau)
            stat_rows = soup.select('.Table__Scroller .Table__TBODY > tr')
            team_points = []
            
            for row in stat_rows:
                cells = row.find_all("td")
                if len(cells) >= 8:
                    try:
                        points = int(cells[7].text.strip())
                    except ValueError:
                        points = None
                    team_points.append(points)
            
            # 3. Combiner √©quipes + points et cr√©er le dictionnaire de positions
            teams_data = list(zip(team_names, team_points))
            
            print(f"üèÜ Classement extrait de {self.url}:")
            for i, (team, pts) in enumerate(teams_data, start=1):
                if team and pts is not None:
                    self.teams_positions[team.lower()] = (i, team, pts)
                    self.full_standings.append({
                        "position": i,
                        "team": team,
                        "points": pts
                    })
                    print(f"  {i}. {team}: {pts} points")

        except Exception as e:
            print(f"‚ùå Erreur scraping classement : {e}")

    def get_position(self, team_query):
        # Utiliser le mapping pour convertir le nom API vers le nom ESPN
        mapped_team_name = team_name_mapping.get(team_query, team_query)
        
        # Recherche exacte d'abord
        if mapped_team_name.lower() in self.teams_positions:
            return self.teams_positions[mapped_team_name.lower()]
        
        # Recherche partielle ensuite
        for key, (position, full_name, points) in self.teams_positions.items():
            if mapped_team_name.lower() in key or key in mapped_team_name.lower():
                return position, full_name, points
        return None, None, None

    def get_full_standings(self):
        """Retourne le classement complet"""
        return self.full_standings

# üß† Fonction utilitaire get_team_classement_position (modifi√©e pour retourner le classement complet)
def get_team_classement_position(country, league, team_name):
    league_info = classement_ligue_mapping.get(country, {}).get(league)
    if not league_info:
        print(f"‚ö†Ô∏è Informations de ligue introuvables pour {country} - {league}")
        return None, None, None, []
    
    url = league_info["url"]
    odds_id = league_info["odds_id"]
    
    print(f"üîç Recherche classement pour {team_name} dans {country} - {league} (odds_id: {odds_id})")
    scraper = ClassementScraper(url)
    scraper.scrape_table()
    
    # Utiliser le mapping pour convertir le nom API vers le nom ESPN
    mapped_team_name = team_name_mapping.get(team_name, team_name)
    position, full_name, points = scraper.get_position(mapped_team_name)
    full_standings = scraper.get_full_standings()
    
    if position:
        print(f"‚úÖ {full_name} trouv√© √† la position {position} avec {points} points")
    else:
        print(f"‚ùå {team_name} (mapp√©: {mapped_team_name}) non trouv√© dans le classement")
    
    return position, full_name, points, full_standings

def get_espn_name(api_team_name):
    mapped = team_name_mapping.get(api_team_name, api_team_name)
    if mapped != api_team_name:
        print(f"üîÑ Mapping appliqu√©: '{api_team_name}' ‚Üí '{mapped}'")
    return mapped

def format_date_fr(date_str, time_str):
    try:
        dt = datetime.strptime(date_str + " " + time_str, "%Y-%m-%d %H:%M")
        mois_fr = [
            "", "janvier", "f√©vrier", "mars", "avril", "mai", "juin",
            "juillet", "ao√ªt", "septembre", "octobre", "novembre", "d√©cembre"
        ]
        mois = mois_fr[dt.month]
        return f"{dt.day} {mois} {dt.year} √† {dt.strftime('%H:%M:%S')} UTC"
    except Exception as e:
        return f"{date_str} √† {time_str}:00 UTC"

# üÜö Fonction pour r√©cup√©rer les confrontations directes de la saison pass√©e avec STATISTIQUES D√âTAILL√âES - MODIFI√âE
def get_h2h_confrontations(home_team_espn, away_team_espn):
    """
    R√©cup√®re les confrontations directes de la saison pass√©e depuis les fichiers JSON
    d√©finis dans classement_ligue_mapping avec r√©cup√©ration des statistiques d√©taill√©es via gameId
    """
    confrontations = []
    
    # Parcourir tous les pays et ligues dans classement_ligue_mapping
    for country, leagues in classement_ligue_mapping.items():
        for league_name, league_info in leagues.items():
            data_json = league_info.get("data_json", "none")
            
            # Ignorer si pas de fichier JSON d√©fini
            if data_json == "none" or not data_json:
                continue
            
            if not os.path.exists(data_json):
                print(f"‚ö†Ô∏è Fichier {data_json} ({league_name}) non trouv√©")
                continue
            
            try:
                with open(data_json, "r", encoding="utf-8") as f:
                    data = json.load(f)
                
                matchs_trouv√©s = 0
                # Parcourir tous les matchs dans le fichier JSON
                for match in data:
                    team1 = match.get("team1", "")
                    team2 = match.get("team2", "")
                    
                    # V√©rifier si les deux √©quipes correspondent (dans un sens ou l'autre)
                    if ((team1 == home_team_espn and team2 == away_team_espn) or 
                        (team1 == away_team_espn and team2 == home_team_espn)):
                        
                        match["source"] = league_name  # Ajouter la source du championnat
                        
                        # ‚úÖ NOUVEAU : R√©cup√©rer les statistiques d√©taill√©es si gameId disponible
                        game_id = match.get("gameId", "N/A")
                        if game_id != "N/A":
                            print(f"üîç R√©cup√©ration des stats H2H pour le match {game_id}...")
                            h2h_stats = get_match_stats(game_id)
                            match["stats"] = h2h_stats
                            if h2h_stats:
                                print(f"üìä {len(h2h_stats)} statistiques H2H r√©cup√©r√©es pour {team1} vs {team2}")
                        else:
                            match["stats"] = {}
                        
                        confrontations.append(match)
                        matchs_trouv√©s += 1
                
                if matchs_trouv√©s > 0:
                    print(f"üÜö {matchs_trouv√©s} confrontation(s) trouv√©e(s) dans {league_name}")
            
            except Exception as e:
                print(f"‚ùå Erreur lors de la lecture de {data_json} ({league_name}) : {e}")
    
    print(f"üÜö Total : {len(confrontations)} confrontation(s) directe(s) trouv√©e(s) pour {home_team_espn} vs {away_team_espn}")
    return confrontations

def get_today_matches_filtered():
    today = datetime.now().strftime('%Y-%m-%d')
    url = "https://v3.football.api-sports.io/fixtures"
    params = {
        "date": today,
        "timezone": "Africa/Abidjan"
    }
    allowed_league_ids = [72, 265, 281, 218, 113, 129, 250, 252, 299, 283, 43, 239, 61, 144, 39, 88, 94, 140, 197, 203, 98, 383, 207, 169, 235, 262, 307, 71, 253, 78, 135]
    r√©sultats = []
    try:
        response = requests.get(url, headers=api_headers, params=params)
        response.raise_for_status()
        data = response.json()
        print(f"\nüìÖ Matchs du jour ({today}) :\n")
        for match in data.get("response", []):
            league_id = match['league']['id']
            league = match['league']['name']
            country = match['league']['country']
            home_api = match['teams']['home']['name']
            away_api = match['teams']['away']['name']
            logo_home = match['teams']['home']['logo']
            logo_away = match['teams']['away']['logo']
            time = match['fixture']['date'][11:16]
            date = match['fixture']['date'][:10]
            heure, minute = map(int, time.split(":"))
            if heure < 8:
                continue

            if league_id in allowed_league_ids:
                print(f"üèÜ [{country}] {league} : {home_api} vs {away_api} √† {time}")
                # Utiliser le mapping pour les noms ESPN
                home_espn = get_espn_name(home_api)
                away_espn = get_espn_name(away_api)
                
                # R√©cup√©rer fixture_id du match actuel (API-Football)
                fixture_id = match.get('fixture', {}).get('id')

                if home_espn in teams_urls and away_espn in teams_urls:
                    print(f"\nüîé Analyse automatique pour : {home_espn} & {away_espn} (fixture_id: {fixture_id})")
                    team1_stats = process_team(home_api, return_data=True)
                    team2_stats = process_team(away_api, return_data=True)
                    if team1_stats: team1_stats['nom'] = home_espn
                    if team2_stats: team2_stats['nom'] = away_espn
                    compare_teams_basic_stats(
                        team1_stats, team2_stats, home_api, away_api, date, time, league, country,
                        logo_home=logo_home, logo_away=logo_away, r√©sultats=r√©sultats, fixture_id=fixture_id
                    )
                else:
                    if home_espn in teams_urls:
                        process_team(home_api)
                    else:
                        FAILED_TEAMS.add(home_api)
                    if away_espn in teams_urls:
                        process_team(away_api)
                    else:
                        FAILED_TEAMS.add(away_api)
        
        # ‚úÖ CORRECTION 1 : R√©cup√©rer le chemin retourn√© par sauvegarder_stats_brutes_json
        if r√©sultats:
            chemin = sauvegarder_stats_brutes_json(r√©sultats, today)  # ‚úÖ R√©cup√©rer le chemin
            git_commit_and_push(chemin)  # ‚úÖ Utiliser le bon chemin
        
        if FAILED_TEAMS:
            save_failed_teams_json(FAILED_TEAMS, today)
        if IGNORED_ZERO_FORM_TEAMS:
            save_ignored_teams_json(IGNORED_ZERO_FORM_TEAMS, today)
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des matchs : {e}")

def get_match_result_for_team(team_name, score, team1, team2):
    try:
        home_score, away_score = map(int, score.split(' - '))
    except Exception:
        return None
    
    # Utiliser le mapping pour comparer correctement
    mapped_team_name = team_name_mapping.get(team_name, team_name)
    mapped_team1 = team_name_mapping.get(team1, team1)
    mapped_team2 = team_name_mapping.get(team2, team2)
    
    if mapped_team_name == mapped_team1:
        return 'W' if home_score > away_score else 'D' if home_score == away_score else 'L'
    elif mapped_team_name == mapped_team2:
        return 'W' if away_score > home_score else 'D' if away_score == home_score else 'L'
    return None

def extract_goals(team_name, score, team1, team2):
    try:
        home_score, away_score = map(int, score.split(' - '))
    except Exception:
        return None, None, None
    
    # Utiliser le mapping pour comparer correctement
    mapped_team_name = team_name_mapping.get(team_name, team_name)
    mapped_team1 = team_name_mapping.get(team1, team1)
    mapped_team2 = team_name_mapping.get(team2, team2)
    
    if mapped_team_name == mapped_team1:
        return home_score, away_score, True
    elif mapped_team_name == mapped_team2:
        return away_score, home_score, False
    return None, None, None

def get_form_points(recent_form):
    points_map = {'W': 3, 'D': 1, 'L': 0}
    total = sum(points_map.get(r, 0) for r in recent_form)
    return total

def scrape_team_data(team_name, action):
    espn_team_name = get_espn_name(team_name)
    url = teams_urls.get(espn_team_name, {}).get(action)
    if not url:
        print(f"URL non trouv√©e pour {espn_team_name} et action {action}.")
        FAILED_TEAMS.add(team_name)
        return []
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        matches = soup.find_all('tr', class_='Table__TR')
        
        # ‚úÖ NOUVELLE STRUCTURE - Objet au lieu de liste
        valid_results = []
        form_6 = []
        form_10 = []
        buts_dom_marques = 0
        buts_dom_encaisses = 0
        buts_ext_marques = 0
        buts_ext_encaisses = 0

        # üèóÔ∏è Initialisation des s√©ries domicile/ext√©rieur
        serie_domicile = []
        serie_exterieur = []

        for match in matches:
            # Date
            date_tag = match.find('div', class_='matchTeams')
            date_text = date_tag.text.strip() if date_tag else "N/A"

            # √âquipes
            teams = match.find_all('a', class_='AnchorLink Table__Team')
            team1 = teams[0].text.strip() if len(teams) > 0 else "N/A"
            team2 = teams[1].text.strip() if len(teams) > 1 else "N/A"

            # Comp√©tition
            comp_tags = match.find_all('a', class_='AnchorLink')
            competition = comp_tags[1].text.strip() if len(comp_tags) > 1 else "N/A"

            # Score + Game ID (via l'URL du match)
            score_tag = match.find('a', href=lambda x: x and "gameId" in x)
            score = score_tag.text.strip() if score_tag else "N/A"
            game_id = "N/A"
            if score_tag and score_tag.get('href') and "gameId" in score_tag['href']:
                try:
                    game_id = score_tag['href'].split("gameId/")[1].split("/")[0]
                except:
                    game_id = "N/A"

            # Statut (FT, Postponed‚Ä¶) - essayer plusieurs s√©lecteurs
            status = "N/A"
            status_tag = match.find('span', {"data-testid": "result"})
            if not status_tag:
                # Fallback - chercher dans les derniers liens
                last_links = match.find_all('a', class_='AnchorLink')
                if last_links:
                    status = last_links[-1].text.strip()
            else:
                status = status_tag.text.strip()

            # Si toutes les infos cl√©s sont pr√©sentes, cr√©er l'objet match
            if all(val != "N/A" for val in [date_text, team1, team2, score]):
                match_obj = {
                    "game_id": game_id,
                    "date": date_text,
                    "home_team": team1,
                    "away_team": team2,
                    "score": score,
                    "status": status,
                    "competition": competition
                }

                # ‚úÖ NOUVEAU : Enrichir avec les statistiques d√©taill√©es si game_id disponible
                if game_id != "N/A":
                    print(f"üîç R√©cup√©ration des stats d√©taill√©es pour le match {game_id}...")
                    match_stats = get_match_stats(game_id)
                    match_obj["stats"] = match_stats
                    match_obj["url"] = f"https://africa.espn.com/football/match/_/gameId/{game_id}"
                else:
                    match_obj["stats"] = {}
                    match_obj["url"] = "N/A"

                valid_results.append(match_obj)
                
                # Calculer les formes et stats avec la nouvelle structure
                result = get_match_result_for_team(espn_team_name, score, team1, team2)
                if result:
                    form_10.append(result)
                    if len(form_6) < 6:
                        form_6.append(result)

                    # üîÑ Ajout dans la bonne s√©rie - utiliser le mapping
                    mapped_team1 = team_name_mapping.get(team1, team1)
                    mapped_espn_name = team_name_mapping.get(espn_team_name, espn_team_name)
                    is_home = (mapped_team1 == mapped_espn_name)
                    if is_home:
                        serie_domicile.append(result)
                    else:
                        serie_exterieur.append(result)

                buts_m, buts_e, domicile = extract_goals(espn_team_name, score, team1, team2)
                if buts_m is not None and buts_e is not None:
                    if domicile:
                        buts_dom_marques += buts_m
                        buts_dom_encaisses += buts_e
                    else:
                        buts_ext_marques += buts_m
                        buts_ext_encaisses += buts_e
            
            if len(valid_results) >= 10:
                break
        
        nb_matchs = len(valid_results)
        if nb_matchs == 0:
            print("Aucun match trouv√©.")
            FAILED_TEAMS.add(team_name)
            return []
        
        total_marques = buts_dom_marques + buts_ext_marques
        total_encaisses = buts_dom_encaisses + buts_ext_encaisses
        
        print(f"\nüóìÔ∏è {action.capitalize()} pour {espn_team_name} :")
        for match_obj in valid_results:
            print(f"ID: {match_obj['game_id']} | {match_obj['date']} | {match_obj['home_team']} vs {match_obj['away_team']} : {match_obj['score']} [{match_obj['competition']}] ({match_obj['status']})")
            # ‚úÖ Afficher les stats si disponibles
            if match_obj.get('stats'):
                print(f"  üìä Stats: {len(match_obj['stats'])} statistiques r√©cup√©r√©es")
                for stat_name, (val1, val2) in list(match_obj['stats'].items())[:3]:  # Afficher les 3 premi√®res
                    print(f"    - {stat_name}: {val1} - {val2}")
                if len(match_obj['stats']) > 3:
                    print(f"    - ... et {len(match_obj['stats']) - 3} autres stats")
        
        total_points_6 = get_form_points(form_6)
        total_points_10 = get_form_points(form_10[:10])  # s√©curit√© si <10
        
        print(f"\nüìä Forme courte (6 derniers matchs) : {' '.join(form_6)} (Total points : {total_points_6})")
        print(f"üìä Forme longue (10 derniers matchs) : {' '.join(form_10[:10])} (Total points : {total_points_10})")
        print(f"‚öΩ Buts marqu√©s √† domicile : {buts_dom_marques}")
        print(f"‚öΩ Buts encaiss√©s √† domicile : {buts_dom_encaisses}")
        print(f"‚öΩ Buts marqu√©s √† l'ext√©rieur : {buts_ext_marques}")
        print(f"‚öΩ Buts encaiss√©s √† l'ext√©rieur : {buts_ext_encaisses}")
        print(f"‚öΩ Total buts marqu√©s : {total_marques}")
        print(f"üõ°Ô∏è Total buts encaiss√©s : {total_encaisses}")
        print(f"\nüìà Moyenne buts marqu√©s par match : {total_marques / nb_matchs:.2f}")
        print(f"üìâ Moyenne buts encaiss√©s par match : {total_encaisses / nb_matchs:.2f}")

        # üí° Affichage des s√©ries
        print(f"üè† S√©rie domicile : {'-'.join(serie_domicile)}")
        print(f"‚úàÔ∏è S√©rie ext√©rieur : {'-'.join(serie_exterieur)}")

        return {
            "matches": valid_results,  # ‚úÖ Maintenant c'est une liste d'objets avec nouvelle structure + STATS D√âTAILL√âES
            "moyenne_marques": total_marques / nb_matchs,
            "moyenne_encaisses": total_encaisses / nb_matchs,
            "form_6": form_6,
            "form_10": form_10[:10],
            "recent_form": form_6,  # compatibilit√© avec l'ancien code
            "serie_domicile": serie_domicile,
            "serie_exterieur": serie_exterieur,
            "buts_dom_marques": buts_dom_marques,
            "buts_dom_encaisses": buts_dom_encaisses,
            "buts_ext_marques": buts_ext_marques,
            "buts_ext_encaisses": buts_ext_encaisses,
            "total_marques": total_marques,
            "total_encaisses": total_encaisses,
            "total_points_6": total_points_6,
            "total_points_10": total_points_10,
            "total_points": total_points_6  # compatibilit√© avec l'ancien code
        }
    except Exception as e:
        print(f"Erreur scraping {espn_team_name} ({action}) : {e}")
        FAILED_TEAMS.add(team_name)
        return []

def compare_teams_basic_stats(
    t1, t2, name1, name2, match_date="N/A", match_time="N/A",
    league="N/A", country="N/A", logo_home=None, logo_away=None, r√©sultats=None, fixture_id=None
):
    if not t1 or not t2:
        print("‚ö†Ô∏è Donn√©es insuffisantes pour la comparaison.")
        return

    # V√©rifier si une √©quipe a une forme r√©cente totalement vide (0 point)
    points1 = get_form_points(t1.get('form_6', []))
    points2 = get_form_points(t2.get('form_6', []))

    if points1 == 0:
        print(f"üö´ {name1} a une forme totalement vide (0 point), match ignor√©.")
        IGNORED_ZERO_FORM_TEAMS.append(name1)
        return
    if points2 == 0:
        print(f"üö´ {name2} a une forme totalement vide (0 point), match ignor√©.")
        IGNORED_ZERO_FORM_TEAMS.append(name2)
        return

    # üèÜ R√©cup√©ration classement des √©quipes - utiliser le mapping (modifi√© pour r√©cup√©rer le classement complet)
    pos_home, nom_classement_home, pts_home, full_standings_home = get_team_classement_position(country, league, name1)
    pos_away, nom_classement_away, pts_away, full_standings_away = get_team_classement_position(country, league, name2)

    if pos_home:
        print(f"üìå Classement de {nom_classement_home} : {pos_home}·µâ avec {pts_home} points")
    if pos_away:
        print(f"üìå Classement de {nom_classement_away} : {pos_away}·µâ avec {pts_away} points")

    # üí∞ R√©cup√©ration des cotes
    print(f"\nüí∞ R√©cup√©ration des cotes...")
    home_espn = get_espn_name(name1)
    away_espn = get_espn_name(name2)
    
    league_info = classement_ligue_mapping.get(country, {}).get(league)
    odds_id = league_info.get("odds_id", "none") if league_info else "none"
    
    odds_data = get_odds_for_match(odds_id, name1, name2, home_espn, away_espn)

    # üÜö R√©cup√©ration des confrontations directes avec STATISTIQUES D√âTAILL√âES
    confrontations_h2h = get_h2h_confrontations(home_espn, away_espn)

    print(f"\nüìÖ Match pr√©vu le {match_date} √† {match_time}")
    print(f"üèÜ Comp√©tition : [{country}] {league}")
    print(f"‚öîÔ∏è {name1} vs {name2}")
    
    print(f"\nü§ù Statistiques brutes :")
    print(f"{name1} ‚û§ Moy. buts marqu√©s : {t1['moyenne_marques']:.2f} | Moy. encaiss√©s : {t1['moyenne_encaisses']:.2f}")
    print(f"{name2} ‚û§ Moy. buts marqu√©s : {t2['moyenne_marques']:.2f} | Moy. encaiss√©s : {t2['moyenne_encaisses']:.2f}")

    print(f"\nüìä Forme courte (6) : {' '.join(t1['form_6'])} ({name1}) vs {' '.join(t2['form_6'])} ({name2})")
    print(f"üìä Forme longue (10) : {' '.join(t1['form_10'])} ({name1}) vs {' '.join(t2['form_10'])} ({name2})")

    print(f"üè† S√©rie domicile ({name1}) : {'-'.join(t1.get('serie_domicile', []))}")
    print(f"‚úàÔ∏è S√©rie ext√©rieur ({name2}) : {'-'.join(t2.get('serie_exterieur', []))}")

    # ‚úÖ CR√âATION DE L'OBJET AVEC NOUVELLE STRUCTURE DES MATCHS + STATS D√âTAILL√âES
    prediction_obj = {
        "id": len(PREDICTIONS) + 1,
        "fixture_id": fixture_id,  # <-- Ajout du fixture_id au m√™me niveau
        "HomeTeam": name1,
        "AwayTeam": name2,
        "date": format_date_fr(match_date, match_time),
        "league": f"{country} - {league}",
        "type": "stats_brutes_avec_cotes_et_ia_avec_stats_detaillees_h2h_enrichi_tirs_confiance_scores_extraction_amelioree",
        "odds": odds_data,  # Cotes des bookmakers
        "stats_home": {
            "moyenne_marques": t1['moyenne_marques'],
            "moyenne_encaisses": t1['moyenne_encaisses'],
            "form_6": t1['form_6'],
            "form_10": t1['form_10'],
            "recent_form": t1['form_6'],  # compatibilit√©
            "total_points_6": t1.get('total_points_6', 0),
            "total_points_10": t1.get('total_points_10', 0),
            "total_points": t1.get('total_points_6', 0),  # compatibilit√©
            "serie_domicile": t1.get('serie_domicile', []),
            "buts_dom_marques": t1.get('buts_dom_marques', 0),
            "buts_dom_encaisses": t1.get('buts_dom_encaisses', 0),
            "buts_ext_marques": t1.get('buts_ext_marques', 0),
            "buts_ext_encaisses": t1.get('buts_ext_encaisses', 0),
            "total_marques": t1.get('total_marques', 0),
            "total_encaisses": t1.get('total_encaisses', 0)
        },
        "stats_away": {
            "moyenne_marques": t2['moyenne_marques'],
            "moyenne_encaisses": t2['moyenne_encaisses'],
            "form_6": t2['form_6'],
            "form_10": t2['form_10'],
            "recent_form": t2['form_6'],  # compatibilit√©
            "total_points_6": t2.get('total_points_6', 0),
            "total_points_10": t2.get('total_points_10', 0),
            "total_points": t2.get('total_points_6', 0),  # compatibilit√©
            "serie_exterieur": t2.get('serie_exterieur', []),
            "buts_dom_marques": t2.get('buts_dom_marques', 0),
            "buts_dom_encaisses": t2.get('buts_dom_encaisses', 0),
            "buts_ext_marques": t2.get('buts_ext_marques', 0),
            "buts_ext_encaisses": t2.get('buts_ext_encaisses', 0),
            "total_marques": t2.get('total_marques', 0),
            "total_encaisses": t2.get('total_encaisses', 0)
        },
        # ‚úÖ NOUVEAUX CHAMPS : MATCHS COMPLETS AVEC NOUVELLE STRUCTURE + STATS D√âTAILL√âES
        "last_matches_home": t1.get('matches', []),  # Les 10 vrais matchs avec objets + STATS D√âTAILL√âES
        "last_matches_away": t2.get('matches', []),  # Les 10 vrais matchs avec objets + STATS D√âTAILL√âES
        # ‚úÖ CLASSEMENT DES √âQUIPES
        "classement": {
            name1: {"position": pos_home, "points": pts_home} if pos_home else None,
            name2: {"position": pos_away, "points": pts_away} if pos_away else None
        },
        # ‚úÖ CLASSEMENT COMPLET DE LA LIGUE
        "classement_complet": full_standings_home if full_standings_home else full_standings_away,
        # ‚úÖ CONFRONTATIONS DIRECTES AVEC STATISTIQUES D√âTAILL√âES
        "confrontations_saison_derniere": confrontations_h2h,
        # Anciens champs conserv√©s pour compatibilit√©
        "logo_home": logo_home,
        "logo_away": logo_away,
        "classement_home": pos_home,
        "classement_away": pos_away,
        "points_classement_home": pts_home,
        "points_classement_away": pts_away,
        "nom_classement_home": nom_classement_home,
        "nom_classement_away": nom_classement_away,
        "country_fr": f"{country} - {league}"
    }

    # üé≤ NOUVEAU : Calcul des probabilit√©s statistiques Monte-Carlo (garde les donn√©es mais ne les inclut PAS dans le prompt)
    print(f"\nüéØ Calcul des probabilit√©s statistiques Monte-Carlo...")
    probabilites_mc = simulation_match_montecarlo(
        prediction_obj["stats_home"], 
        prediction_obj["stats_away"],
        h2h_data=confrontations_h2h,
        n=20000
    )

    print("\nüéØ PROBABILIT√âS STATISTIQUES (Monte-Carlo + base mondiale + H2H)")
    print(json.dumps(probabilites_mc, indent=2, ensure_ascii=False))

    # Ajouter au JSON final (reste disponible dans les donn√©es mais PAS dans le prompt IA)
    prediction_obj["Probabilites"] = probabilites_mc

    # üîÆ G√©n√©ration d'analyse IA avec DeepSeek (AVEC RETRY AUTOMATIQUE + STATS D√âTAILL√âES + NOUVELLES FONCTIONNALIT√âS SANS MONTE-CARLO DANS LE PROMPT)
    print(f"\nüß† Lancement de l'analyse IA DeepSeek avec retry automatique + stats d√©taill√©es + H2H enrichi + confiance + scores (sans Monte-Carlo dans le prompt)...")
    prompt = generate_detailed_prompt(prediction_obj)
    analyse_ia = call_deepseek_analysis(prompt, max_retries=5)  # ‚úÖ 5 tentatives max

    # ‚úÖ NOUVELLES EXTRACTIONS AM√âLIOR√âES AVEC SUPPORT DES DEUX FORMATS
    confiance_pourcentage = extract_confidence_percentage(analyse_ia)
    prediction_principale = extract_prediction_principale(analyse_ia)
    corners_prevu = extract_corners_prevu(analyse_ia)  # Gard√© dans la structure mais IA ne pr√©dit plus
    tirs_cadres_prevu = extract_tirs_cadres_prevu(analyse_ia)  # Gard√© dans la structure mais IA ne pr√©dit plus
    scores_probables = extract_scores_probables(analyse_ia)

    prediction_obj["analyse_ia"] = analyse_ia
    prediction_obj["confiance_pourcentage"] = confiance_pourcentage  # ‚úÖ Champ d√©di√©
    prediction_obj["prediction_principale"] = prediction_principale  # ‚úÖ Nouveau champ
    prediction_obj["corners_prevu"] = corners_prevu  # ‚úÖ Gard√© mais IA ne pr√©dit plus
    prediction_obj["tirs_cadres_prevu"] = tirs_cadres_prevu  # ‚úÖ Gard√© mais IA ne pr√©dit plus
    prediction_obj["scores_probables"] = scores_probables  # ‚úÖ Nouveau champ
    
    print(f"\nüß† Analyse IA DeepSeek :\n{'='*60}")
    print(analyse_ia)
    print(f"{'='*60}")
    
    # ‚úÖ AFFICHAGE DES EXTRACTIONS
    if confiance_pourcentage is not None:
        print(f"\nüìä Pourcentage de confiance extrait : {confiance_pourcentage}%")
    else:
        print(f"\n‚ö†Ô∏è Pourcentage de confiance non d√©tect√© dans l'analyse")
    
    if prediction_principale:
        print(f"üéØ Pr√©diction principale extraite : {prediction_principale}")
    
    if corners_prevu:
        print(f"üìê Corners pr√©vus extraits (pr√©sent mais IA ne pr√©dit plus) : {corners_prevu}")
    
    if tirs_cadres_prevu:
        print(f"üéØ Tirs cadr√©s pr√©vus extraits (pr√©sent mais IA ne pr√©dit plus) : {tirs_cadres_prevu}")
    
    if scores_probables:
        print(f"‚öΩ Scores probables extraits : {scores_probables}")

    PREDICTIONS.append(prediction_obj)
    if r√©sultats is not None:
        r√©sultats.append(prediction_obj)

    print("\nüìö Note : Statistiques brutes avec cotes + analyse IA DeepSeek avec retry + matchs complets avec stats d√©taill√©es + classement complet + H2H enrichi avec stats + confiance + scores + extraction am√©lior√©e des deux formats + PROBABILIT√âS MONTE-CARLO INT√âGR√âES (non incluses dans le prompt IA).")

def process_team(team_name, return_data=False):
    print(f"\nüß† Analyse pour l'√©quipe : {get_espn_name(team_name)}")
    data = scrape_team_data(team_name, 'results')
    print("\n" + "-" * 60 + "\n")
    return data if return_data else None

# ‚úÖ MODIFI√â : Fonction de sauvegarde avec NOUVEAU nom de fichier simple
def sauvegarder_stats_brutes_json(predictions_simples, date_str):
    total_predictions = len(predictions_simples)

    for p in predictions_simples:
        p['country_fr'] = p['league']

    data_complete = {
        "metadata": {
            "date_generation": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            "date_matchs": date_str,
            "version_algorithme": "8.3 - STATISTIQUES BRUTES + FORMES 6/10 + POINTS CLASSEMENT + COTES + ANALYSE IA DEEPSEEK ENRICHIE + MATCHS COMPLETS AVEC STATS D√âTAILL√âES + CLASSEMENT COMPLET + H2H ENRICHI AVEC STATS + CONFIANCE EXTRAITE + SCORES + RETRY IA + EXTRACTION AM√âLIOR√âE 2 FORMATS + PROBABILIT√âS MONTE-CARLO (NON INCLUSES DANS PROMPT IA)",
            "total_predictions": total_predictions,
            "mode": "stats_brutes_avec_cotes_et_ia_complete_enrichie_retry_nouvelle_structure_avec_stats_detaillees_h2h_enrichi_confiance_extraite_scores_extraction_amelioree_2_formats_montecarlo_hors_prompt",
            "note": "Collecte des statistiques brutes compl√®tes : moyennes, formes r√©centes (6 et 10 matchs), s√©ries domicile/ext√©rieur, classements avec points + cotes des bookmakers + analyse IA DeepSeek ENRICHIE avec matchs d√©taill√©s (nouvelle structure objet avec game_id, date, home_team, away_team, score, status, competition + STATS D√âTAILL√âES ESPN) + classement complet + confrontations directes H2H √©largies AVEC STATS D√âTAILL√âES + pourcentage confiance EXTRAIT AUTOMATIQUEMENT + 2 scores probables + retry automatique IA + suppression 'match nul' + EXTRACTION AM√âLIOR√âE support des 2 formats (**FORMAT** et FORMAT simple) + PROBABILIT√âS MONTE-CARLO autonomes (calcul√©es mais NON incluses dans le prompt IA)",
            "ia_model": "deepseek-r1-distill-llama-70b",
            "groq_keys_count": len(groq_keys),
            "monte_carlo": {
                "enabled": True,
                "iterations": 20000,
                "calibrage": "moyennes_internationales + statistiques_√©quipes + ajustement_h2h",
                "probabilites_calculees": ["1x2", "double_chance", "over_under", "btts", "resultat_total", "scores_probables"],
                "inclus_dans_prompt_ia": False
            },
            "nouveautes_v8_3_modifiees": [
                "üé≤ Module de probabilit√©s Monte-Carlo int√©gr√© (20 000 simulations)",
                "üî¢ Calibrage avec moyennes internationales FIFA/UEFA",
                "üÜö Ajustement automatique selon les confrontations H2H",
                "üìä Probabilit√©s 1X2, Double Chance, Over/Under (0.5‚Üí5.5), BTTS",
                "üéØ Scores exacts les plus probables calcul√©s statistiquement",
                "‚ùå MODIFICIATION : Probabilit√©s Monte-Carlo NON incluses dans le prompt IA",
                "‚ùå MODIFICIATION : IA ne pr√©dit plus corners et tirs cadr√©s (champs gard√©s dans structure)",
                "üìÅ MODIFICATION : Nom de fichier simplifi√© pr√©diction-YYYY-MM-DD-analyse-ia.json",
                "‚úÖ Maintien de toutes les autres fonctionnalit√©s avanc√©es v8.2"
            ]
        },
        "statistiques_brutes_avec_ia_hors_montecarlo": {
            "count": len(predictions_simples),
            "details": predictions_simples
        }
    }
    
    # ‚úÖ NOUVEAU NOM DE FICHIER SIMPLE COMME DEMAND√â
    nom_fichier = f"pr√©diction-{date_str}-analyse-ia.json"
    
    with open(nom_fichier, "w", encoding="utf-8") as f:
        json.dump(data_complete, f, ensure_ascii=False, indent=2)
    print(f"‚úÖ Statistiques brutes compl√®tes avec cotes et analyse IA enrichie sauvegard√©es dans : {nom_fichier}")
    print(f"üìä Total: {total_predictions} analyses compl√®tes avec cotes + IA DeepSeek enrichie + retry + H2H enrichi avec stats + nouvelles fonctionnalit√©s + extraction am√©lior√©e 2 formats + PROBABILIT√âS MONTE-CARLO (hors prompt IA)")
    
    return nom_fichier

def save_failed_teams_json(failed_teams, date_str):
    chemin = f"teams_failed_{date_str}.json"
    data = {"teams_failed": sorted(list(failed_teams))}
    with open(chemin, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    print(f"‚ùó Liste des √©quipes sans donn√©es sauvegard√©e dans : {chemin}")

def save_ignored_teams_json(ignored_teams, date_str):
    chemin = f"teams_ignored_zero_form_{date_str}.json"
    data = {"teams_ignored_zero_form": sorted(list(set(ignored_teams)))}
    with open(chemin, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    print(f"üõë √âquipes ignor√©es pour forme nulle sauvegard√©es dans : {chemin}")

def git_commit_and_push(filepath):
    try:
        subprocess.run(["git", "config", "--global", "user.email", "github-actions[bot]@users.noreply.github.com"], check=True)
        subprocess.run(["git", "config", "--global", "user.name", "github-actions[bot]"], check=True)
        subprocess.run(["git", "add", filepath], check=True)
        subprocess.run(["git", "commit", "-m", f"üìä Statistiques brutes compl√®tes du {datetime.now().strftime('%Y-%m-%d')} - Version 8.3 MODIFI√âE : STATS BRUTES + FORMES 6/10 + POINTS CLASSEMENT + COTES + ANALYSE IA DEEPSEEK ENRICHIE + MATCHS COMPLETS AVEC STATS D√âTAILL√âES ESPN + CLASSEMENT COMPLET + H2H ENRICHI AVEC STATS + CONFIANCE EXTRAITE + SCORES + RETRY IA + EXTRACTION AM√âLIOR√âE 2 FORMATS + PROBABILIT√âS MONTE-CARLO (HORS PROMPT IA) + NOM FICHIER SIMPLIFI√â"], check=True)
        subprocess.run(["git", "push"], check=True)
        print("‚úÖ Statistiques brutes compl√®tes avec cotes et analyse IA enrichie + stats d√©taill√©es ESPN + H2H enrichi + nouvelles fonctionnalit√©s + extraction am√©lior√©e 2 formats + PROBABILIT√âS MONTE-CARLO (hors prompt IA) + nom fichier simplifi√© pouss√©es avec succ√®s sur GitHub.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur Git : {e}")

def main():
    print("üìä Bienvenue dans l'analyse v8.3 MODIFI√âE : STATISTIQUES BRUTES COMPL√àTES + ANALYSE IA DEEPSEEK ENRICHIE + RETRY + H2H ENRICHI AVEC STATS + CONFIANCE EXTRAITE + SCORES + EXTRACTION AM√âLIOR√âE 2 FORMATS + PROBABILIT√âS MONTE-CARLO (HORS PROMPT IA) + NOM FICHIER SIMPLIFI√â !")
    print("üßπ Toutes les fonctionnalit√©s d'analyse avanc√©e ont √©t√© supprim√©es")
    print("üìà Collecte compl√®te des statistiques brutes :")
    print("   - Moyennes buts marqu√©s/encaiss√©s")
    print("   - Forme r√©cente (6 derniers matchs)")
    print("   - Forme longue (10 derniers matchs)")
    print("   - S√©ries domicile/ext√©rieur")
    print("   - Classements des √©quipes avec points")
    print("   - Points de forme (6 et 10 matchs)")
    print("   üí∞ - Cotes des bookmakers (1xBet prioritaire, puis Betclic)")
    print("   üß† - Analyse IA DeepSeek ENRICHIE avec alternance automatique des cl√©s Groq")
    print("   üîÑ - Retry automatique (5 tentatives) si l'IA √©choue")
    print("   üìã - 10 vrais matchs complets avec structure objet (game_id, date, home_team, away_team, score, status, competition)")
    print("   üìä - ‚ú® Statistiques d√©taill√©es ESPN pour chaque match pass√© (possession, tirs, corners, etc.)")
    print("   üèÜ - Classement complet de la ligue")
    print("   üÜö - ‚ú® Confrontations directes H2H √©largies AVEC STATISTIQUES D√âTAILL√âES via gameId")
    print("   üìä - ‚ú® Pourcentage de confiance EXTRAIT AUTOMATIQUEMENT dans un champ d√©di√©")
    print("   ‚öΩ - ‚ú® Les 2 scores les plus probables")
    print("   ‚ùå - ‚ú® Suppression de 'match nul' des pr√©dictions (remplac√© par double chance)")
    print("   üîß - ‚ú® v8.2 : EXTRACTION AM√âLIOR√âE support des 2 formats d'analyse IA (**FORMAT** et FORMAT simple)")
    print("   üé≤ - ‚ú® NOUVEAU v8.3 : MODULE PROBABILIT√âS MONTE-CARLO INT√âGR√â (HORS PROMPT IA) :")
    print("      ‚ñ´Ô∏è 20 000 simulations par match")
    print("      ‚ñ´Ô∏è Calibrage avec moyennes internationales FIFA/UEFA")
    print("      ‚ñ´Ô∏è Ajustement automatique selon les confrontations H2H")
    print("      ‚ñ´Ô∏è Probabilit√©s 1X2, Double Chance, Over/Under (0.5‚Üí5.5), BTTS")
    print("      ‚ñ´Ô∏è Scores exacts les plus probables calcul√©s statistiquement")
    print("      ‚ùå MODIFICATION : Probabilit√©s Monte-Carlo NON incluses dans le prompt IA")
    print("   ‚ùå MODIFICATION : IA ne pr√©dit plus corners et tirs cadr√©s (champs gard√©s dans structure)")
    print("   üìÅ MODIFICATION : Nom de fichier simplifi√© pr√©diction-YYYY-MM-DD-analyse-ia.json")
    print("   ‚ú® - Prompt IA enrichi avec toutes ces donn√©es d√©taill√©es + statistiques ESPN des matchs + H2H avec stats (SANS Monte-Carlo)")
    print("üö´ Aucun ajustement, bonus, malus")
    print("üîÆ Pr√©dictions bas√©es sur l'analyse IA DeepSeek enrichie avec retry automatique + stats d√©taill√©es + H2H enrichi + nouvelles fonctionnalit√©s + extraction am√©lior√©e 2 formats (SANS Monte-Carlo dans le prompt)")
    print("üîÑ Mapping automatique des noms d'√©quipes conserv√©")
    print("üõë Filtrage automatique des √©quipes avec forme nulle conserv√©")
    print("üìä Analyse pure et compl√®te des statistiques brutes + IA enrichie + retry + H2H enrichi avec stats + extraction am√©lior√©e 2 formats + PROBABILIT√âS MONTE-CARLO calcul√©es (hors prompt IA) des matchs du jour...\n")
    get_today_matches_filtered()
    print(f"\nüìã R√©sum√© de la session:")
    print(f"   üìä {len(PREDICTIONS)} analyses compl√®tes de statistiques brutes avec cotes et IA enrichie + stats d√©taill√©es ESPN + H2H enrichi + nouvelles fonctionnalit√©s + extraction am√©lior√©e 2 formats + PROBABILIT√âS MONTE-CARLO (hors prompt IA) g√©n√©r√©es")
    print(f"   üß† Analyse IA DeepSeek ENRICHIE avec retry automatique int√©gr√©e (SANS Monte-Carlo dans le prompt)")
    print(f"   üîë {len(groq_keys)} cl√©s Groq disponibles")
    print(f"   üìã Matchs complets avec nouvelle structure objet et classements complets int√©gr√©s dans le prompt IA")
    print(f"   üìä ‚ú® Statistiques d√©taill√©es ESPN r√©cup√©r√©es pour chaque match pass√©")
    print(f"   üÜö ‚ú® Confrontations H2H √©largies avec STATISTIQUES D√âTAILL√âES via gameId disponibles dans le prompt IA")
    print(f"   üìä ‚ú® Pourcentage confiance EXTRAIT AUTOMATIQUEMENT + 2 scores probables")
    print(f"   ‚ùå ‚ú® Suppression de 'match nul' des pr√©dictions possibles")
    print(f"   üìÅ ‚ú® Fichier sauvegard√© avec nom SIMPLIFI√â pr√©diction-YYYY-MM-DD-analyse-ia.json")
    print(f"   üîÑ Syst√®me de retry automatique (5 tentatives) pour garantir les analyses IA")
    print(f"   ‚úÖ Structure objet des matchs pass√©s avec game_id, date, home_team, away_team, score, status, competition + STATS D√âTAILL√âES")
    print(f"   üîß ‚ú® v8.2 : Support robuste des 2 formats d'analyse IA (**FORMAT** et FORMAT simple)")
    print(f"   üéØ ‚ú® v8.2 : Extraction automatique de prediction_principale, scores_probables")
    print(f"   üé≤ ‚ú® NOUVEAU v8.3 : PROBABILIT√âS MONTE-CARLO int√©gr√©es avec 20 000 simulations par match (CALCUL√âES MAIS HORS PROMPT IA)")
    print(f"   üî¢ ‚ú® NOUVEAU v8.3 : Calibrage avec moyennes internationales + ajustement H2H automatique")
    print(f"   ‚ùå ‚ú® MODIFICATION v8.3 : IA utilise uniquement stats + cotes + H2H (SANS probabilit√©s Monte-Carlo)")
    print(f"   ‚ùå ‚ú® MODIFICATION v8.3 : IA ne pr√©dit plus corners et tirs cadr√©s (champs conserv√©s dans structure)")
    if IGNORED_ZERO_FORM_TEAMS:
        print(f"   üö´ {len(set(IGNORED_ZERO_FORM_TEAMS))} √©quipes ignor√©es pour forme nulle")
    print("\n‚ú® Merci d'avoir utilis√© le script v8.3 MODIFI√â - Statistiques brutes compl√®tes avec cotes et analyse IA DeepSeek enrichie + retry + H2H enrichi avec stats + confiance extraite + scores + extraction am√©lior√©e 2 formats + PROBABILIT√âS MONTE-CARLO (CALCUL√âES MAIS HORS PROMPT IA) + NOM FICHIER SIMPLIFI√â !")

if __name__ == "__main__":
    main()
